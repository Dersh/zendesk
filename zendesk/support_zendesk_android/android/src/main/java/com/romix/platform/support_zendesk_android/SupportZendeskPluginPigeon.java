// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.romix.platform.support_zendesk_android;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class SupportZendeskPluginPigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InitializeRequestData {
    private @Nullable String accountKey;
    public @Nullable String getAccountKey() { return accountKey; }
    public void setAccountKey(@Nullable String setterArg) {
      this.accountKey = setterArg;
    }

    private @Nullable String appId;
    public @Nullable String getAppId() { return appId; }
    public void setAppId(@Nullable String setterArg) {
      this.appId = setterArg;
    }

    public static final class Builder {
      private @Nullable String accountKey;
      public @NonNull Builder setAccountKey(@Nullable String setterArg) {
        this.accountKey = setterArg;
        return this;
      }
      private @Nullable String appId;
      public @NonNull Builder setAppId(@Nullable String setterArg) {
        this.appId = setterArg;
        return this;
      }
      public @NonNull InitializeRequestData build() {
        InitializeRequestData pigeonReturn = new InitializeRequestData();
        pigeonReturn.setAccountKey(accountKey);
        pigeonReturn.setAppId(appId);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("accountKey", accountKey);
      toMapResult.put("appId", appId);
      return toMapResult;
    }
    static @NonNull InitializeRequestData fromMap(@NonNull Map<String, Object> map) {
      InitializeRequestData pigeonResult = new InitializeRequestData();
      Object accountKey = map.get("accountKey");
      pigeonResult.setAccountKey((String)accountKey);
      Object appId = map.get("appId");
      pigeonResult.setAppId((String)appId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartChatRequestData {
    private @Nullable String department;
    public @Nullable String getDepartment() { return department; }
    public void setDepartment(@Nullable String setterArg) {
      this.department = setterArg;
    }

    private @Nullable String name;
    public @Nullable String getName() { return name; }
    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String email;
    public @Nullable String getEmail() { return email; }
    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String phoneNumber;
    public @Nullable String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    private @Nullable String userLanguageTag;
    public @Nullable String getUserLanguageTag() { return userLanguageTag; }
    public void setUserLanguageTag(@Nullable String setterArg) {
      this.userLanguageTag = setterArg;
    }

    private @Nullable String licenseTag;
    public @Nullable String getLicenseTag() { return licenseTag; }
    public void setLicenseTag(@Nullable String setterArg) {
      this.licenseTag = setterArg;
    }

    private @Nullable String brandTag;
    public @Nullable String getBrandTag() { return brandTag; }
    public void setBrandTag(@Nullable String setterArg) {
      this.brandTag = setterArg;
    }

    private @Nullable String codeTag;
    public @Nullable String getCodeTag() { return codeTag; }
    public void setCodeTag(@Nullable String setterArg) {
      this.codeTag = setterArg;
    }

    public static final class Builder {
      private @Nullable String department;
      public @NonNull Builder setDepartment(@Nullable String setterArg) {
        this.department = setterArg;
        return this;
      }
      private @Nullable String name;
      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }
      private @Nullable String email;
      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }
      private @Nullable String phoneNumber;
      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }
      private @Nullable String userLanguageTag;
      public @NonNull Builder setUserLanguageTag(@Nullable String setterArg) {
        this.userLanguageTag = setterArg;
        return this;
      }
      private @Nullable String licenseTag;
      public @NonNull Builder setLicenseTag(@Nullable String setterArg) {
        this.licenseTag = setterArg;
        return this;
      }
      private @Nullable String brandTag;
      public @NonNull Builder setBrandTag(@Nullable String setterArg) {
        this.brandTag = setterArg;
        return this;
      }
      private @Nullable String codeTag;
      public @NonNull Builder setCodeTag(@Nullable String setterArg) {
        this.codeTag = setterArg;
        return this;
      }
      public @NonNull StartChatRequestData build() {
        StartChatRequestData pigeonReturn = new StartChatRequestData();
        pigeonReturn.setDepartment(department);
        pigeonReturn.setName(name);
        pigeonReturn.setEmail(email);
        pigeonReturn.setPhoneNumber(phoneNumber);
        pigeonReturn.setUserLanguageTag(userLanguageTag);
        pigeonReturn.setLicenseTag(licenseTag);
        pigeonReturn.setBrandTag(brandTag);
        pigeonReturn.setCodeTag(codeTag);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("department", department);
      toMapResult.put("name", name);
      toMapResult.put("email", email);
      toMapResult.put("phoneNumber", phoneNumber);
      toMapResult.put("userLanguageTag", userLanguageTag);
      toMapResult.put("licenseTag", licenseTag);
      toMapResult.put("brandTag", brandTag);
      toMapResult.put("codeTag", codeTag);
      return toMapResult;
    }
    static @NonNull StartChatRequestData fromMap(@NonNull Map<String, Object> map) {
      StartChatRequestData pigeonResult = new StartChatRequestData();
      Object department = map.get("department");
      pigeonResult.setDepartment((String)department);
      Object name = map.get("name");
      pigeonResult.setName((String)name);
      Object email = map.get("email");
      pigeonResult.setEmail((String)email);
      Object phoneNumber = map.get("phoneNumber");
      pigeonResult.setPhoneNumber((String)phoneNumber);
      Object userLanguageTag = map.get("userLanguageTag");
      pigeonResult.setUserLanguageTag((String)userLanguageTag);
      Object licenseTag = map.get("licenseTag");
      pigeonResult.setLicenseTag((String)licenseTag);
      Object brandTag = map.get("brandTag");
      pigeonResult.setBrandTag((String)brandTag);
      Object codeTag = map.get("codeTag");
      pigeonResult.setCodeTag((String)codeTag);
      return pigeonResult;
    }
  }
  private static class ChatApiCodec extends StandardMessageCodec {
    public static final ChatApiCodec INSTANCE = new ChatApiCodec();
    private ChatApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return InitializeRequestData.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return StartChatRequestData.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof InitializeRequestData) {
        stream.write(128);
        writeValue(stream, ((InitializeRequestData) value).toMap());
      } else 
      if (value instanceof StartChatRequestData) {
        stream.write(129);
        writeValue(stream, ((StartChatRequestData) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ChatApi {
    void initialize(@NonNull InitializeRequestData request);
    void startChat(@NonNull StartChatRequestData request);
    void endChat();

    /** The codec used by ChatApi. */
    static MessageCodec<Object> getCodec() {
      return ChatApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ChatApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ChatApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              InitializeRequestData requestArg = (InitializeRequestData)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.initialize(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatApi.startChat", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StartChatRequestData requestArg = (StartChatRequestData)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.startChat(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatApi.endChat", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.endChat();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
