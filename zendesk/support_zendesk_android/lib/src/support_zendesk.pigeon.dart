// Autogenerated from Pigeon (v3.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class InitializeRequestData {
  InitializeRequestData({
    this.accountKey,
    this.appId,
  });

  String? accountKey;
  String? appId;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['accountKey'] = accountKey;
    pigeonMap['appId'] = appId;
    return pigeonMap;
  }

  static InitializeRequestData decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return InitializeRequestData(
      accountKey: pigeonMap['accountKey'] as String?,
      appId: pigeonMap['appId'] as String?,
    );
  }
}

class StartChatRequestData {
  StartChatRequestData({
    this.department,
    this.name,
    this.email,
    this.phoneNumber,
    this.userLanguageTag,
    this.licenseTag,
    this.brandTag,
    this.codeTag,
  });

  String? department;
  String? name;
  String? email;
  String? phoneNumber;
  String? userLanguageTag;
  String? licenseTag;
  String? brandTag;
  String? codeTag;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['department'] = department;
    pigeonMap['name'] = name;
    pigeonMap['email'] = email;
    pigeonMap['phoneNumber'] = phoneNumber;
    pigeonMap['userLanguageTag'] = userLanguageTag;
    pigeonMap['licenseTag'] = licenseTag;
    pigeonMap['brandTag'] = brandTag;
    pigeonMap['codeTag'] = codeTag;
    return pigeonMap;
  }

  static StartChatRequestData decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return StartChatRequestData(
      department: pigeonMap['department'] as String?,
      name: pigeonMap['name'] as String?,
      email: pigeonMap['email'] as String?,
      phoneNumber: pigeonMap['phoneNumber'] as String?,
      userLanguageTag: pigeonMap['userLanguageTag'] as String?,
      licenseTag: pigeonMap['licenseTag'] as String?,
      brandTag: pigeonMap['brandTag'] as String?,
      codeTag: pigeonMap['codeTag'] as String?,
    );
  }
}

class _ChatApiCodec extends StandardMessageCodec {
  const _ChatApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is InitializeRequestData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is StartChatRequestData) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return InitializeRequestData.decode(readValue(buffer)!);

      case 129:
        return StartChatRequestData.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ChatApi {
  /// Constructor for [ChatApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ChatApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ChatApiCodec();

  Future<void> initialize(InitializeRequestData arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ChatApi.initialize', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> startChat(StartChatRequestData arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ChatApi.startChat', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_request]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> endChat() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.ChatApi.endChat', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
